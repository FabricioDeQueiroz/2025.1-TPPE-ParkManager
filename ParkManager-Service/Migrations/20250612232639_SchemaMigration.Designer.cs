// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ParkManager_Service.Data;

#nullable disable

namespace ParkManager_Service.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250612232639_SchemaMigration")]
    partial class SchemaMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ParkManager_Service.Models.Acesso", b =>
                {
                    b.Property<int>("IdAcesso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_acesso");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdAcesso"));

                    b.Property<DateTime>("DataHoraEntrada")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_hora_entrada");

                    b.Property<DateTime?>("DataHoraSaida")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_hora_saida");

                    b.Property<int>("IdCliente")
                        .HasColumnType("integer")
                        .HasColumnName("id_cliente");

                    b.Property<int>("IdEstacionamento")
                        .HasColumnType("integer")
                        .HasColumnName("id_estacionamento");

                    b.Property<string>("NomeEvento")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("nome_evento");

                    b.Property<string>("PlacaVeiculo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("placa_veiculo");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer")
                        .HasColumnName("tipo");

                    b.Property<decimal?>("ValorAcesso")
                        .HasColumnType("numeric(10, 2)")
                        .HasColumnName("valor_acesso");

                    b.HasKey("IdAcesso");

                    b.HasIndex("IdCliente");

                    b.HasIndex("IdEstacionamento");

                    b.ToTable("ACESSO");
                });

            modelBuilder.Entity("ParkManager_Service.Models.Estacionamento", b =>
                {
                    b.Property<int>("IdEstacionamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_estacionamento");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdEstacionamento"));

                    b.Property<decimal>("AdicionalNoturno")
                        .HasColumnType("numeric(10, 2)")
                        .HasColumnName("adicional_noturno");

                    b.Property<decimal>("DescontoHora")
                        .HasColumnType("numeric(10, 2)")
                        .HasColumnName("desconto_hora");

                    b.Property<decimal>("Faturamento")
                        .HasColumnType("numeric(10, 2)")
                        .HasColumnName("faturamento");

                    b.Property<TimeSpan?>("HoraAbertura")
                        .HasColumnType("interval")
                        .HasColumnName("hora_abertura");

                    b.Property<TimeSpan?>("HoraFechamento")
                        .HasColumnType("interval")
                        .HasColumnName("hora_fechamento");

                    b.Property<int>("IdGerente")
                        .HasColumnType("integer")
                        .HasColumnName("id_gerente");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("nome");

                    b.Property<string>("NomeContratante")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("nome_contratante");

                    b.Property<decimal>("RetornoContratante")
                        .HasColumnType("numeric(10, 2)")
                        .HasColumnName("retorno_contratante");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer")
                        .HasColumnName("tipo");

                    b.Property<int>("VagasOcupadas")
                        .HasColumnType("integer")
                        .HasColumnName("vagas_ocupadas");

                    b.Property<int>("VagasTotais")
                        .HasColumnType("integer")
                        .HasColumnName("vagas_totais");

                    b.Property<decimal>("ValorDiaria")
                        .HasColumnType("numeric(10, 2)")
                        .HasColumnName("valor_diaria");

                    b.Property<decimal>("ValorEvento")
                        .HasColumnType("numeric(10, 2)")
                        .HasColumnName("valor_evento");

                    b.Property<decimal>("ValorFracao")
                        .HasColumnType("numeric(10, 2)")
                        .HasColumnName("valor_fracao");

                    b.Property<decimal>("ValorMensal")
                        .HasColumnType("numeric(10, 2)")
                        .HasColumnName("valor_mensal");

                    b.HasKey("IdEstacionamento");

                    b.HasIndex("IdGerente");

                    b.ToTable("ESTACIONAMENTO");
                });

            modelBuilder.Entity("ParkManager_Service.Models.Evento", b =>
                {
                    b.Property<int>("IdEvento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_evento");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdEvento"));

                    b.Property<DateTime>("DataHoraFim")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_hora_fim");

                    b.Property<DateTime>("DataHoraInicio")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_hora_inicio");

                    b.Property<int>("IdEstacionamento")
                        .HasColumnType("integer")
                        .HasColumnName("id_estacionamento");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("nome");

                    b.HasKey("IdEvento");

                    b.HasIndex("IdEstacionamento");

                    b.ToTable("EVENTO");
                });

            modelBuilder.Entity("ParkManager_Service.Models.Usuario", b =>
                {
                    b.Property<int>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_usuario");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdUsuario"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("nome");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("senha");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer")
                        .HasColumnName("tipo");

                    b.HasKey("IdUsuario");

                    b.ToTable("USUARIO");
                });

            modelBuilder.Entity("ParkManager_Service.Models.Acesso", b =>
                {
                    b.HasOne("ParkManager_Service.Models.Usuario", "Cliente")
                        .WithMany("Acessos")
                        .HasForeignKey("IdCliente")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ParkManager_Service.Models.Estacionamento", "Estacionamento")
                        .WithMany("Acessos")
                        .HasForeignKey("IdEstacionamento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Estacionamento");
                });

            modelBuilder.Entity("ParkManager_Service.Models.Estacionamento", b =>
                {
                    b.HasOne("ParkManager_Service.Models.Usuario", "Gerente")
                        .WithMany("EstacionamentosGerenciados")
                        .HasForeignKey("IdGerente")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gerente");
                });

            modelBuilder.Entity("ParkManager_Service.Models.Evento", b =>
                {
                    b.HasOne("ParkManager_Service.Models.Estacionamento", "Estacionamento")
                        .WithMany("Eventos")
                        .HasForeignKey("IdEstacionamento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estacionamento");
                });

            modelBuilder.Entity("ParkManager_Service.Models.Estacionamento", b =>
                {
                    b.Navigation("Acessos");

                    b.Navigation("Eventos");
                });

            modelBuilder.Entity("ParkManager_Service.Models.Usuario", b =>
                {
                    b.Navigation("Acessos");

                    b.Navigation("EstacionamentosGerenciados");
                });
#pragma warning restore 612, 618
        }
    }
}
